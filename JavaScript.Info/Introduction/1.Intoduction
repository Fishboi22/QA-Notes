This Information is used for notes and proof of reseach. Information is used from "Javascript.info".

Javascript's Background:
    it was initally used to create "alive" web pages.
    The language is scripts, just like in the name, and are executed like simple text.
    It has no relation to Java
    It uses "the Javascript engine" which is embedded in a lot of systems.
    Javascript is a "safe" programming language because it does not have low-level access to memory or the CPU
    JavaScript’s capabilities greatly depend on the environment it’s running in. For instance, Node.js supports functions that allow JavaScript to read/write arbitrary files, perform network requests, etc

How do engines work?
    Engines are complicated. But the basics are easy.

    The engine (embedded if it’s a browser) reads (“parses”) the script.
    Then it converts (“compiles”) the script to machine code.
    And then the machine code runs, pretty fast.
    The engine applies optimizations at each step of the process. It even watches the compiled script as it runs, analyzes the data that flows through it, and further optimizes the machine code based on that knowledge.

what an in browser JavaScript can do:
    In-browser JavaScript can do everything related to webpage manipulation, interaction with the user, and the webserver.

    For instance, in-browser JavaScript is able to:

    Add new HTML to the page, change the existing content, modify styles.
    React to user actions, run on mouse clicks, pointer movements, key presses.
    Send requests over the network to remote servers, download and upload files (so-called AJAX and COMET technologies).
    Get and set cookies, ask questions to the visitor, show messages.
    Remember the data on the client-side (“local storage”).

What it cant do:
    JavaScript’s abilities in the browser are limited to protect the user’s safety. The aim is to prevent an evil webpage from accessing private information or harming the user’s data.

    Examples of such restrictions include:

    JavaScript on a webpage may not read/write arbitrary files on the hard disk, copy them or execute programs. It has no direct access to OS functions.

    Modern browsers allow it to work with files, but the access is limited and only provided if the user does certain actions, like “dropping” a file into a browser window or selecting it via an <input> tag.

    There are ways to interact with the camera/microphone and other devices, but they require a user’s explicit permission. So a JavaScript-enabled page may not sneakily enable a web-camera, observe the surroundings and send the information to the NSA.

    Such limitations do not exist if JavaScript is used outside of the browser, for example on a server. Modern browsers also allow plugins/extensions which may ask for extended permissions.

Why is JavaScript great?
    There are at least three great things about JavaScript:

    Full integration with HTML/CSS.
    Simple things are done simply.
    Supported by all major browsers and enabled by default.

Javascript syntax can be annoying, there are many programming languages that are used instea of javascript, but are then transpiled(converted) to javascript
    Such languages are:

    CoffeeScript - is “syntactic sugar” for JavaScript. It introduces shorter syntax, allowing us to write clearer and more precise code. Usually, Ruby devs like it.
    TypeScript - is concentrated on adding “strict data typing” to simplify the development and support of complex systems. It is developed by Microsoft.
    Flow - also adds data typing, but in a different way. Developed by Facebook.
    Dart - is a standalone language that has its own engine that runs in non-browser environments (like mobile apps), but also can be transpiled to JavaScript. Developed by Google.
    Brython - is a Python transpiler to JavaScript that enables the writing of applications in pure Python without JavaScript.
    Kotlin - is a modern, concise and safe programming language that can target the browser or Node.
